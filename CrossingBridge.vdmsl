module 橋渡り
exports all
definitions

values
  各自所要時間 = {1|->1, 2|->2, 3|->5, 4|->10};

types
  人番号 = nat
   inv p == p in set {1,2,3,4};

   所要時間 = nat;

functions

  time2cross : set of 人番号 -> 所要時間
  time2cross(ps) ==
    let 最も遅い人 in set ps be st
            forall p in set ps & 各自所要時間(最も遅い人) >= 各自所要時間(p)
        in 各自所要時間(最も遅い人);

  累計時間 : seq of set of 人番号 -> 所要時間
  累計時間(履歴) == if len 履歴 = 0 then
                       0
                    else
                       time2cross(hd 履歴) + 累計時間(tl 履歴);

  行き : set of 人番号 * set of 人番号 * seq of set of 人番号
                                                      -> set of seq of set of 人番号
  行き(岸1, 岸2, 履歴) ==
       let 候補集合 = {p|p in set power 岸1 & (card p = 1)or(card p = 2)} in
           dunion { if p1 = 岸1 then
                       {履歴 ^ [p1]}
                    else
                       帰り(岸1\p1, 岸2 union p1, 履歴 ^ [p1])
                    | p1 in set 候補集合 & 累計時間(履歴 ^ [p1]) <= 17};
           
  帰り : set of 人番号 * set of 人番号 * seq of set of 人番号
                                                      -> set of seq of set of 人番号
  帰り(岸1, 岸2, 履歴) ==
       let 候補集合 = {p|p in set power 岸2 & (card p = 1)or(card p = 2)} in
           dunion { 行き(岸1 union p1, 岸2\p1, 履歴 ^ [p1])
                    | p1 in set 候補集合 & 累計時間(履歴 ^ [p1]) < 17};

 solve : () -> set of seq of set of 人番号
  solve() == 行き({1,2,3,4}, {}, [])
    post 
      let 結果集合 = RESULT in
          forall 結果 in set 結果集合 & 累計時間(結果) <= 17;
          
end 橋渡り
